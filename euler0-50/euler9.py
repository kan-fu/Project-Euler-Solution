class Solution:
    def __init__(self):
        import time

        start = time.time()
        self.answer = self.solve()
        elapse = time.time() - start
        if elapse > 1:
            self.time = f"{elapse:.1f}s"
        else:
            self.time = f"{elapse*1000:.1f}ms"

    def solve(self, N=1000):
        """
        Pythagorean triple can be generated by
            a = k * (m ** 2 - n ** 2)
            b = k * (2 * m * n)
            c = k * (m ** 2 + n ** 2)
        where m, n, and k are positive integers with m > n, and with m and n coprime and not both odd.
        See https://en.wikipedia.org/wiki/Pythagorean_triple#Generating_a_triple.
        Plug into a + b + c = N, we can get
            N // 2 = m * (m + n) * k > m**2 => m < sqrt(N/2)
        We can first search m that is a factor of N//2, then (m+n) that is an odd factor of r = N//2//m and satisifies that
        m and n are coprime and  m > n > 0, then k = N // 2 / (m * (m + n))
        """
        import math

        if N % 2 != 0:
            return -1
        ans = -1
        for m in range(2, int((N // 2) ** (1 / 2)) + 1):
            if N // 2 % m == 0:
                r = N // 2 // m
                while r % 2 == 0:
                    # only need an odd factor
                    r //= 2
                # make sure m_plus_n starts from an odd number
                m_plus_n_start = m + 1 if m % 2 == 0 else m + 2
                for m_plus_n in range(m_plus_n_start, min(r + 1, 2 * m), 2):
                    # m + n < 2m since n < m, m + n <= r since it is a factor of r
                    if r % m_plus_n == 0 and math.gcd(m_plus_n, m) == 1:
                        # (m, n) == 1 <=> (m, m+n) == 1
                        k = N // 2 // (m * m_plus_n)
                        n = m_plus_n - m
                        a, b, c = (
                            k * (m**2 - n**2),
                            k * 2 * m * n,
                            k * (m**2 + n**2),
                        )

                        if ans < a * b * c:
                            ans = a * b * c
        return ans


if __name__ == "__main__":
    solver = Solution()
    print(solver.answer, solver.time)
